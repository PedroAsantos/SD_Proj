package sharingRegions;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Random;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

import Interfaces.IBroker_BettingCenter;
import Interfaces.ISpectator_BettingCenter;
import stakeholders.Spectator;

public class MonitorBettingCenter implements ISpectator_BettingCenter, IBroker_BettingCenter {
	private final ReentrantLock mutex;
	private final Condition spectator_condition;
	private final Condition broker_condition;
	private final Condition spectatorWaiting_condition;
	private final int numberOfSpectators;
	private boolean spectatorsQueueBol;
	private boolean spectatorBetAproving;
	private boolean receivingDividends;
	private int numberOfBets;
	//hash map <cavalo,[espectator,money] -> assim com o contains value conseguimos ver logo se alguem ganhou e depois e facil de retirar o valor.
	private HashMap<Integer,List<double[]>> spectatorBets;
	private Condition[] receivMoneyList;
	private List<Integer> horseWinners;
	private Queue<Spectator> queueToReceivMoney;
	private double[] bet = new double[2];
	private int horseId;
	private boolean brokerIsOccupied;
	List<Integer> pickHorse;
	private HashMap<Integer,Integer> horsePerformance;
	private HashMap<Integer,Double> horseProbabilities;
	Repository repo;


	public MonitorBettingCenter(Repository repo) {
		mutex = new ReentrantLock(true);
		spectator_condition = mutex.newCondition();
		broker_condition = mutex.newCondition();
		spectatorWaiting_condition = mutex.newCondition();
		this.numberOfSpectators = repo.getNumberOfSpectators();
		numberOfBets=0;
		spectatorBetAproving=true;
		spectatorsQueueBol=false;
		receivingDividends=true;
		brokerIsOccupied=false;
		spectatorBets = new HashMap<Integer,List<double[]>>(numberOfSpectators);
		receivMoneyList = new Condition[numberOfSpectators];
		for(int i=0;i<numberOfSpectators;i++) {
			receivMoneyList[i]=mutex.newCondition();
		}
		queueToReceivMoney = new LinkedList<Spectator>();
		this.repo=repo;
		horsePerformance = repo.gethorsePerformance();
		horseProbabilities = new HashMap<Integer,Double>();
		pickHorse= new ArrayList<Integer>();
	}
	@Override
	public void acceptTheBets() {
		
		mutex.lock();
		try {
			System.out.println("ACCEPTING BETS BROKER");
			
			while(numberOfBets < numberOfSpectators) {
				try {
					broker_condition.await();
					//place bet
					List <double[]> listTemp = new ArrayList<double[]>();
					double[] temp = new double[2];
					temp[0]=bet[0];
					temp[1]=bet[1];
					if(spectatorBets.containsKey(horseId)) {
						listTemp = spectatorBets.get(horseId);
						listTemp.add(temp);
						spectatorBets.put(horseId,listTemp);
						repo.setspecbets((int)bet[0],horseId);
					}else {	
						listTemp.add(temp);
						spectatorBets.put(horseId,listTemp);
						repo.setspecbets((int)bet[0],horseId);
					}
					repo.setspectatorBets(spectatorBets);
					numberOfBets++;
					spectatorBetAproving=false;
					spectator_condition.signal();

				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			numberOfBets=0;
			spectatorsQueueBol=false;
			pickHorse.clear();
		
			repo.setspectatorBets(spectatorBets);
			System.out.println("BROKER WAKE UP");
			
			
		} finally {
			mutex.unlock();
		}
		
		
	}

	@Override
	public void placeABet(Spectator spectator) {
		mutex.lock();
		try {
		
			while(spectatorsQueueBol) {
				try {
					spectatorWaiting_condition.await();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			spectatorsQueueBol=true;
			System.out.println("Spectator_"+spectator.getID()+" is betting!");
			horsePerformance=repo.gethorsePerformance();
			List<Integer> horsesRunning = repo.getHorsesRunning();
			
			if(horseProbabilities.size()==0) {
				int totalP=0;
				for(int i = 0 ;i<horsesRunning.size();i++) {
					totalP+=horsePerformance.get(horsesRunning.get(i));
				}
				
				double prob;
				for(int i=0;i<horsesRunning.size();i++) {
					if(horsesRunning.size()<100) {
						prob=(double)horsePerformance.get(horsesRunning.get(i))/totalP*100;
					}else {
						prob=(double)horsePerformance.get(horsesRunning.get(i))/totalP*horsesRunning.size()*2;	
					}
					horseProbabilities.put(horsesRunning.get(i), prob);
					repo.sethorseProbabilities(horseProbabilities);
				} 	
			

				int toPut;

				for(int i=0;i<horsesRunning.size();i++) {
					if(horseProbabilities.containsKey(horsesRunning.get(i))) {
						toPut = horseProbabilities.get(horsesRunning.get(i)).intValue();
						for(int c = 0;c<toPut;c++) {
							pickHorse.add(horsesRunning.get(i));
						}
					}
				}
			}
			Random random = new Random();
			int n = random.nextInt(pickHorse.size());
			this.horseId=pickHorse.get(n); 
			this.bet[0]=spectator.getID(); //spectator_id
			this.bet[1]= random.nextDouble()*spectator.getMoney(); //money
			spectator.payBet(this.bet[1]);
			System.out.println("Spectator_"+spectator.getID()+" choose horse " + horseId+" the money " + bet[1]);
			repo.setspecbetamount(spectator.getID(),bet[1]);
			broker_condition.signal();
		
			while(spectatorBetAproving) {
				try {
					spectator_condition.await();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
			spectatorBetAproving=true;
			spectatorsQueueBol=false;
			spectatorWaiting_condition.signal();
				
		} finally {
			mutex.unlock();
			
		}
		
	}
	@Override
	public void goCollectTheGains(Spectator spectator) {
		// TODO Auto-generated method stub
		//jogar com o facto de a ordem de chegada e igual a de  saida FIFO. E dar assim a saida deles.registando a entrada
		mutex.lock();
		try {
			//openHonorStand=false;
			queueToReceivMoney.add(spectator);
		
			while(brokerIsOccupied) {
				try {
					receivMoneyList[spectator.getID()].await();
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}

			brokerIsOccupied=true;
			broker_condition.signal();
			System.out.println("Spectator_"+spectator.getID()+" waiting to collect the gains!");
			while(receivingDividends) {
				try {
					receivMoneyList[spectator.getID()].await();
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
			brokerIsOccupied=false;
			//PAY ATTENTO TO THIS
		
			//System.out.println("queu size"+queueToReceivMoney.size()+"->"+queueToReceivMoney.peek().getID());
			if(!queueToReceivMoney.isEmpty()) {
				receivingDividends=true;
				receivMoneyList[queueToReceivMoney.peek().getID()].signal();
			}else {
				receivingDividends=true;
			}
			///----------------------
			System.out.println("Spectator_"+spectator.getID()+" received the money!");
			//repo.getNumberOfRaces();
		} finally {
			mutex.unlock();
		}
	}
	@Override
	public void honourTheBets() {
		mutex.lock();
		try {

			List<double[]> winners = new ArrayList<double[]>();
		
			for(int i=0;i<horseWinners.size();i++) {
				System.out.println("HORSE WINNERS:"+horseWinners.get(i));
				if(spectatorBets.containsKey(horseWinners.get(i))) {
					winners.addAll(spectatorBets.get(horseWinners.get(i)));
				}
			}
			for (int i = 0; i < winners.size(); i++) {
				System.out.println("Winners:"+winners.get(i)[0]);
			}
			Spectator spectatorReceivingMoney;
			int betsPayed=0;
			while(betsPayed<winners.size()/*|| openHonorStand*/) {
				try {
					broker_condition.await();
					spectatorReceivingMoney=queueToReceivMoney.remove();
					for(int i=0;i<winners.size();i++) {
						if(winners.get(i)[0]==spectatorReceivingMoney.getID()) {
							//how to knoe the horse that spectator bet
							System.out.println("Spectator_"+spectatorReceivingMoney.getID()+ " is receiving "+spectatorReceivingMoney.getMoney());
							spectatorReceivingMoney.addMoney(winners.get(i)[1]*1/horseProbabilities.get(horseWinners.get(0)));
							repo.setspecMoney(spectatorReceivingMoney.getID(),spectatorReceivingMoney.getMoney());
							betsPayed++;
							break;
						}
						
					}
					
					receivingDividends=false;
					receivMoneyList[spectatorReceivingMoney.getID()].signal();
					
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
					
			}
			
			//openHonorStand=true;
			spectatorBets.clear();
			horseProbabilities.clear();
			repo.clearhorserank();
		} finally {
			mutex.unlock();
		}
		
	}
	@Override
	public boolean areThereAnyWinners(List<Integer> horseWinners) {
		boolean thereAreWinner=false;
		mutex.lock();
		try {
			this.horseWinners = new ArrayList<>(horseWinners);
			for(int i = 0;i < horseWinners.size();i++) {
				if(spectatorBets.containsKey(horseWinners.get(i))) {
					thereAreWinner=true;
				}
			}
			if(!thereAreWinner) {
				spectatorBets.clear();
				horseProbabilities.clear();
				repo.clearhorserank();
			}
			
		}finally {
			mutex.unlock();
		}
		return thereAreWinner;
		
	}



}
